!function(e){var t=function(n,f,s){"use strict";var m,y;if(function(){var e,t={lazyClass:"lazyload",loadedClass:"lazyloaded",loadingClass:"lazyloading",preloadClass:"lazypreload",errorClass:"lazyerror",autosizesClass:"lazyautosizes",fastLoadedClass:"ls-is-cached",iframeLoadMode:0,srcAttr:"data-src",srcsetAttr:"data-srcset",sizesAttr:"data-sizes",minSize:40,customMedia:{},init:!0,expFactor:1.5,hFac:.8,loadMode:2,loadHidden:!0,ricTimeout:0,throttleDelay:125};for(e in y=n.lazySizesConfig||n.lazysizesConfig||{},t)e in y||(y[e]=t[e])}(),!f||!f.getElementsByClassName)return{init:function(){},cfg:y,noSupport:!0};function c(e,t){le(e,t)||e.setAttribute("class",(e[Z]("class")||"").trim()+" "+t)}function u(e,t){(t=le(e,t))&&e.setAttribute("class",(e[Z]("class")||"").replace(t," "))}function z(e,t){var a;!X&&(a=n.picturefill||y.pf)?(t&&t.src&&!e[Z]("srcset")&&e.setAttribute("srcset",t.src),a({reevaluate:!0,elements:[e]})):t&&t.src&&(e.src=t.src)}function e(a,e){return e?function(){me(a)}:function(){var e=this,t=arguments;me(function(){a.apply(e,t)})}}function t(e){function t(){var e=s.now()-n;e<99?te(t,99-e):(ne||i)(i)}var a,n,i=function(){a=null,e()};return function(){n=s.now(),a=a||te(t,99)}}function a(){!a.i&&f.getElementsByClassName&&(a.i=!0,ze._(),ye._())}var i,o,r,h,g,v,p,l,C,b,A,E,_,w,M,d,N,L,x,W,S,B,T,F,R,D,k,H,O,P,$,q,I,U,j,G,J,K,Q,V=f.documentElement,X=n.HTMLPictureElement,Y="addEventListener",Z="getAttribute",ee=n[Y].bind(n),te=n.setTimeout,ae=n.requestAnimationFrame||te,ne=n.requestIdleCallback,ie=/^picture$/i,se=["load","error","lazyincluded","_lazyloaded"],oe={},re=Array.prototype.forEach,le=function(e,t){return oe[t]||(oe[t]=new RegExp("(\\s|^)"+t+"(\\s|$)")),oe[t].test(e[Z]("class")||"")&&oe[t]},de=function(t,a,e){var n=e?Y:"removeEventListener";e&&de(t,a),se.forEach(function(e){t[n](e,a)})},ce=function(e,t,a,n,i){var s=f.createEvent("Event");return(a=a||{}).instance=m,s.initEvent(t,!n,!i),s.detail=a,e.dispatchEvent(s),s},ue=function(e,t){return(getComputedStyle(e,null)||{})[t]},fe=function(e,t,a){for(a=a||e.offsetWidth;a<y.minSize&&t&&!e._lazysizesWidth;)a=t.offsetWidth,t=t.parentNode;return a},me=(K=[],Q=J=[],we._lsFlush=_e,we),ye=(B=/^img$/i,T=/^iframe$/i,F="onscroll"in n&&!/(gle|ing)bot/.test(navigator.userAgent),k=-1,H=function(e){return(M=null==M?"hidden"==ue(f.body,"visibility"):M)||!("hidden"==ue(e.parentNode,"visibility")&&"hidden"==ue(e,"visibility"))},d=ve,L=D=R=0,x=y.throttleDelay,W=y.ricTimeout,S=ne&&49<W?function(){ne(pe,{timeout:W}),W!==y.ricTimeout&&(W=y.ricTimeout)}:e(function(){te(pe)},!0),P=e(Ce),$=function(e){P({target:e.target})},q=e(function(t,e,a,n,i){var s,o,r,l,d;(r=ce(t,"lazybeforeunveil",e)).defaultPrevented||(n&&(a?c(t,y.autosizesClass):t.setAttribute("sizes",n)),s=t[Z](y.srcsetAttr),a=t[Z](y.srcAttr),i&&(o=(d=t.parentNode)&&ie.test(d.nodeName||"")),l=e.firesLoad||"src"in t&&(s||a||o),r={target:t},c(t,y.loadingClass),l&&(clearTimeout(v),v=te(ge,2500),de(t,$,!0)),o&&re.call(d.getElementsByTagName("source"),be),s?t.setAttribute("srcset",s):a&&!o&&(T.test(t.nodeName)?(n=a,0==(d=(e=t).getAttribute("data-load-mode")||y.iframeLoadMode)?e.contentWindow.location.replace(n):1==d&&(e.src=n)):t.src=a),i&&(s||o)&&z(t,{src:a})),t._lazyRace&&delete t._lazyRace,u(t,y.lazyClass),me(function(){var e=t.complete&&1<t.naturalWidth;l&&!e||(e&&c(t,y.fastLoadedClass),Ce(r),t._lazyCache=!0,te(function(){"_lazyCache"in t&&delete t._lazyCache},9)),"lazy"==t.loading&&D--},!0)}),U=t(function(){y.loadMode=3,O()}),{_:function(){l=s.now(),m.elements=f.getElementsByClassName(y.lazyClass),h=f.getElementsByClassName(y.lazyClass+" "+y.preloadClass),ee("scroll",O,!0),ee("resize",O,!0),ee("pageshow",function(e){var t;!e.persisted||(t=f.querySelectorAll("."+y.loadingClass)).length&&t.forEach&&ae(function(){t.forEach(function(e){e.complete&&I(e)})})}),n.MutationObserver?new MutationObserver(O).observe(V,{childList:!0,subtree:!0,attributes:!0}):(V[Y]("DOMNodeInserted",O,!0),V[Y]("DOMAttrModified",O,!0),setInterval(O,999)),ee("hashchange",O,!0),["focus","mouseover","click","load","transitionend","animationend"].forEach(function(e){f[Y](e,O,!0)}),/d$|^c/.test(f.readyState)?Ee():(ee("load",Ee),f[Y]("DOMContentLoaded",O),te(Ee,2e4)),m.elements.length?(ve(),me._lsFlush()):O()},checkElems:O=function(e){var t;(e=!0===e)&&(W=33),N||(N=!0,(t=x-(s.now()-L))<0&&(t=0),e||t<9?S():te(S,t))},unveil:I=function(e){var t,a,n,i;e._lazyRace||(!(i="auto"==(n=(a=B.test(e.nodeName))&&(e[Z](y.sizesAttr)||e[Z]("sizes"))))&&g||!a||!e[Z]("src")&&!e.srcset||e.complete||le(e,y.errorClass)||!le(e,y.lazyClass))&&(t=ce(e,"lazyunveilread").detail,i&&ze.updateElem(e,!0,e.offsetWidth),e._lazyRace=!0,D++,q(e,t,i,n,a))},_aLSL:Ae}),ze=(o=e(function(e,t,a,n){var i,s,o;if(e._lazysizesWidth=n,e.setAttribute("sizes",n+="px"),ie.test(t.nodeName||""))for(s=0,o=(i=t.getElementsByTagName("source")).length;s<o;s++)i[s].setAttribute("sizes",n);a.detail.dataAttr||z(e,a.detail)}),{_:function(){i=f.getElementsByClassName(y.autosizesClass),ee("resize",r)},checkElems:r=t(function(){var e,t=i.length;if(t)for(e=0;e<t;e++)he(i[e])}),updateElem:he});function he(e,t,a){var n=e.parentNode;n&&(a=fe(e,n,a),(t=ce(e,"lazybeforesizes",{width:a,dataAttr:!!t})).defaultPrevented||(a=t.detail.width)&&a!==e._lazysizesWidth&&o(e,n,t,a))}function ge(e){D--,e&&!(D<0)&&e.target||(D=0)}function ve(){var e,t,a,n,i,s,o,r,l,d,c,u=m.elements;if((p=y.loadMode)&&D<8&&(e=u.length)){for(t=0,k++;t<e;t++)if(u[t]&&!u[t]._lazyRace)if(!F||m.prematureUnveil&&m.prematureUnveil(u[t]))I(u[t]);else if((o=u[t][Z]("data-expand"))&&(i=+o)||(i=R),l||(l=!y.expand||y.expand<1?500<V.clientHeight&&500<V.clientWidth?500:370:y.expand,d=(m._defEx=l)*y.expFactor,c=y.hFac,M=null,R<d&&D<1&&2<k&&2<p&&!f.hidden?(R=d,k=0):R=1<p&&1<k&&D<6?l:0),r!==i&&(C=innerWidth+i*c,b=innerHeight+i,s=-1*i,r=i),d=u[t].getBoundingClientRect(),(w=d.bottom)>=s&&(A=d.top)<=b&&(_=d.right)>=s*c&&(E=d.left)<=C&&(w||_||E||A)&&(y.loadHidden||H(u[t]))&&(g&&D<3&&!o&&(p<3||k<4)||function(e,t){var a,n=e,i=H(e);for(A-=t,w+=t,E-=t,_+=t;i&&(n=n.offsetParent)&&n!=f.body&&n!=V;)(i=0<(ue(n,"opacity")||1))&&"visible"!=ue(n,"overflow")&&(a=n.getBoundingClientRect(),i=_>a.left&&E<a.right&&w>a.top-1&&A<a.bottom+1);return i}(u[t],i))){if(I(u[t]),n=!0,9<D)break}else!n&&g&&!a&&D<4&&k<4&&2<p&&(h[0]||y.preloadAfterLoad)&&(h[0]||!o&&(w||_||E||A||"auto"!=u[t][Z](y.sizesAttr)))&&(a=h[0]||u[t]);a&&!n&&I(a)}}function pe(){N=!1,L=s.now(),d()}function Ce(e){var t=e.target;t._lazyCache?delete t._lazyCache:(ge(e),c(t,y.loadedClass),u(t,y.loadingClass),de(t,$),ce(t,"lazyloaded"))}function be(e){var t,a=e[Z](y.srcsetAttr);(t=y.customMedia[e[Z]("data-media")||e[Z]("media")])&&e.setAttribute("media",t),a&&e.setAttribute("srcset",a)}function Ae(){3==y.loadMode&&(y.loadMode=2),U()}function Ee(){g||(s.now()-l<999?te(Ee,999):(g=!0,y.loadMode=3,O(),ee("scroll",Ae,!0)))}function _e(){var e=Q;for(Q=J.length?K:J,G=!(j=!0);e.length;)e.shift()();j=!1}function we(e,t){j&&!t?e.apply(this,arguments):(Q.push(e),G||(G=!0,(f.hidden?te:ae)(_e)))}return te(function(){y.init&&a()}),m={cfg:y,autoSizer:ze,loader:ye,init:a,uP:z,aC:c,rC:u,hC:le,fire:ce,gW:fe,rAF:me}}(e,e.document,Date);e.lazySizes=t,"object"==typeof module&&module.exports&&(module.exports=t)}("undefined"!=typeof window?window:{});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
